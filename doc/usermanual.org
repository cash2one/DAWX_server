* 简介
这是一个类似nagios的服务器架构，有无数的节点(nodeserver)和一个配置服务器(CSServer),以及一个用户UI(webclient.py)。由于需求组件基本上采用系统自带，只需要在对于命令行进行启动即可。
* 系统需求
** 软件需求：
*** python环境
需要python2 环境，由于使用环境(或者精力有限)，保证python2.6.6 和 python 2.7.8 能够正常运行，本程序是python2环境下的产物，如果需要在python3环境下使用，可以使用 python 2to3 工具，但是不保证正常运行
*** expect 
目前仅仅在scp.sh中使用了expect，如果不需要该功能，可自行删除scp.sh或者安装expect

* 架构说明
** 整体架构
*** 示意图
[[./dia/开新区.jpeg][开新区]]
** 服务架构
*** nodeserver
[[./dia/nodeserver.jpeg][nodeserver]]
*** CSserver
[[./dia/CSserver.jpeg][CSserver]]

* 功能讲解
** 通用和基础功能
*** 服务器架构方面
**** 服务器主程序------NDSocketServer.py 和CSSocketServer.py
服务端使用的是系统自带的SocketServer模块进行书写，利用StreamRequestHandler作为基本的socket请求。利用 SocketServer.ThreadingMixIn 作为异步通信使用，然后使用自己改写的daemon作为守护进行使用。

对于外部的socket请求。服务端的处理过程：
+ 密码验证，本程序使用的是md5加密，也是最简单的加密方式。
+ 命令接收，然后交给后端的dataanalyse进行命令分析

**** 命令分析------dataanalyse.py
这个模块的处理很简单, 判断是否有命令，然后将参数传递给对于的处理模块。

在实现上，先将函数和命令做一个字典映射。
#+BEGIN_SRC python-mode
dictname = {'findbydb':CSsqliteconsole.findbydb,
               'findbyip':CSsqliteconsole.findbyip,
               'update':CSsqliteconsole.update,
               'delete':CSsqliteconsole.deletebydb,
               'add': CSsqliteconsole.add
               }
#+END_SRC

下一步将从socket服务端接收的命令拆分，知道对应命令，然后将参数进行传递
#+BEGIN_SRC python-mode
    if handlecmd in dictname.keys():
        return dictname[handlecmd](alist[1:])
    elif  handlecmd == 'help' :
        return usage()
    else:
        return [False , "You should use the right command"]
#+END_SRC

*** webclient

*** libbase
**** 日志记录------CSLogging.py
利用的是系统的logging模块，目前实现的功能有：
+ 实现了两种类型的日志记录：filehandler 和streamhandler，
+ 日志级别的控制，可以自定义filehandler和streamhandler的记录级别，已经配置在config.cfg中。
+ 日志轮询
+ streamhandler的级别颜色控制，这个可以作为debug的时候的显示

外部调用使用的write_logger函数，函数形式是：
#+BEGIN_SRC python-mode
write_logger(level ,astr)
#+END_SRC

目前分类的级别是：
#+BEGIN_EXAMPLE
exception > critical > error > warning > info > debug
#+END_EXAMPLE

**** 守护进程------daemon.py
查看网上的国外一个大神的代码，对于其中的部分进行了更改，对于服务端进行了包装。有三个命令选项 start/stop/restart 。因为自己的CSLogging 有一个streamhandler，所以增加了一个debug模式。


**** 加密模块------encrypt.py
单纯的md5加密，每天一换。

**** 本地配置模块------mod_config.py
利用系统自带的ConfigParser模块。来获取配置参数。

**** 获取配置服务器客户端------getConfigClient.py
是一个socket客户端，获取服务端的数据


* 业务功能
** CSServer 功能讲解
*** 数据库连接模块------CSsqlite.py
对于数据库连接的二次包装，实现了增删改查。
*** 命令处理------CSsqliteconsole.py
实现了dataanalyse和CSsqlite的命令转换。感觉不太彻底。以后改进。
** nodeserver 功能讲解
*** 开新区------kaixinqu.py
[[./dia/开新区.jpeg][开新区]]

*** 合区------hequ.py
[[./dia/合区.jpeg][合区]]

** webclient 功能讲解

* api 函数使用
** CSserver
+ 表元素添加

+ 更改表元素
+ 查找表元素
+ 删除表元素
+ help



**  nodeserver 
+ 合区
+ 开新区
+ 压缩区
  基本上用不到，因为嵌套到

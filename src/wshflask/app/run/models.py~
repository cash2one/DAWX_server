from werkzeug.security import generate_password_hash,check_password_hash
from flask.ext.login import UserMixin
from .. import login_manager,db



class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    users = db.relationship('User', backref='role')
    
    def __repr__(self):
        return '<Role %r> ' % self.name

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(64), unique=True, index=True)
    username = db.Column(db.String(64), unique=True, index=True)
    password = db.Column(db.String(128))
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))

    def __repr__(self):
        return '<User %r>' % self.username
        
    def verify_password(self,password):
        return  True
    def is_active(self):
        return True
    def get_id(self):
        return unicode(self.id)
    
    def is_authenticated(self):
        return True
    def is_anonymous(self):
        return False

    
@login_manager.user_loader
def load_user(user_id):
    print user_id
    print User.query.get(int(user_id))
    return User.query.get(int(user_id))
        
